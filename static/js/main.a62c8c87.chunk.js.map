{"version":3,"sources":["components/BarChartComponent.js","components/LineChartComponent.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["BarChartComponent","BarChartData","className","ResponsiveContainer","width","aspect","BarChart","height","data","margin","top","right","left","bottom","CartesianGrid","horizontal","vertical","stroke","XAxis","dataKey","tick","fill","YAxis","unit","Tooltip","contentStyle","backgroundColor","color","borderRadius","itemStyle","Legend","Bar","LineChartComponent","LineChartData","ScatterChart","ZAxis","type","name","label","value","position","offset","angle","dy","dx","Scatter","Header","App","useEffect","a","fetch","response","json","results","parsedSpeciesData","console","log","fetchSpecies","parsedPlanetData","fetchPlanets","cleanData","map","species","averageHeight","Number","average_height","filter","isNaN","splice","setBarData","planets","diameter","day","rotation_period","setLineData","useState","barData","lineData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a62c8c87.chunk.js","sourcesContent":["import { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n\nfunction BarChartComponent({ BarChartData }) {\n\n    return (\n\n        <div className=\"bar-chart-box\">\n\n            <h3 className=\"text\">Average Height of Species</h3>\n\n            {/*  If copying demo from recharts change width and aspect to make it work  */}\n            <ResponsiveContainer width=\"90%\" aspect={2}>\n                <BarChart\n                    width={500}\n                    height={300}\n                    data={BarChartData}\n                    margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5,\n                    }}\n                    >\n                    <CartesianGrid  horizontal=\"true\" vertical=\"\" stroke=\"#243240\" />\n                    <XAxis dataKey=\"name\"\n                        tick={{\n                            fill:\"#fff\"\n                        }}\n                    />\n                    <YAxis\n                        tick={{\n                            fill:\"#fff\"\n                        }}\n                        unit=\"cm\"\n                    />\n                    <Tooltip\n                        contentStyle={{\n                            backgroundColor: \"#2e4355\",\n                            color: \"#fff\",\n                            borderRadius: \"5px\"\n                        }}\n                        itemStyle={{\n                            color: \"#fff\"\n                        }}\n                    />\n                    <Legend />\n                    <Bar dataKey=\"averageHeight\" fill=\"#82ca9d\" />\n                </BarChart>\n            </ResponsiveContainer>\n\n        </div>\n    );\n}\n\nexport default BarChartComponent;","import { ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\n\nfunction LineChartComponent({ LineChartData }) {\n\n   return (\n\n    <div className=\"line-chart-box\">\n\n      <h3 className=\"text\">Diameter of planets and length of one day in hours</h3>\n\n      {/*  If copying demo from recharts change width and aspect to make it work  */}\n      <ResponsiveContainer width=\"100%\" aspect={2}>\n        <ScatterChart\n          width={400}\n          height={400}\n          margin={{\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20,\n          }}\n        >\n          <CartesianGrid  horizontal=\"true\" vertical=\"true \" stroke=\"#243240\" />\n          <ZAxis type=\"string \"dataKey=\"name\" name=\"Planet name\" />\n          <XAxis type=\"number\" dataKey=\"diameter\" name=\"Planet diameter\"\n            tick={{\n              fill:\"#fff\"\n            }}\n            label={{\n              value: 'Diameter (x106)',\n              position: 'bottom',\n              offset: 7,\n              fill: \"#fff\"\n            }}\n          />\n          <YAxis type=\"number\" dataKey=\"day\" name=\"hours per day\"\n            tick={{\n              fill:\"#fff\"\n            }}\n            label={{\n              value: 'Length of day (hrs)',\n              angle: -90,\n              position: 'top',\n              dy: 130,\n              dx: -15,\n              fill: \"#fff\"\n            }}\n          />\n          <Tooltip contentStyle={{\n              backgroundColor: \"#2e4355\",\n              color: \"#fff\",\n              borderRadius: \"5px\"\n            }}\n            itemStyle={{\n              color: \"#fff\"\n            }}\n          />\n          <Scatter name=\"name\" data={LineChartData} fill=\"#8884d8\" />\n        </ScatterChart>\n      </ResponsiveContainer>\n\n    </div>\n  );\n}\n\nexport default LineChartComponent;\n","function Header() {\n    return (\n        <div className='header'>\n            <h1 className=\"text\">Star Wars Data Dashboard</h1>\n        </div>\n    );\n}\n\nexport default Header;","import './App.css';\nimport BarChartComponent from './components/BarChartComponent';\nimport LineChartComponent from './components/LineChartComponent';\nimport Header from './components/Header';\n\nimport { useState, useEffect } from 'react';\n\n\nfunction App() {\n\n  useEffect(() => {\n\n    const speciesURL = 'https://swapi.dev/api/species';\n    const planetsURL = 'https://swapi.dev/api/planets';\n\n\n//  Returns a raw array of data from API\n    const fetchSpecies = async () => {\n      try {\n        const response = await fetch(speciesURL);\n        const data = await response.json();\n\n        const { results } = data;\n\n        parsedSpeciesData(results);\n      }\n      catch(error) {\n        console.log('error', error);\n      }\n    }\n    fetchSpecies();\n\n\n//  Returns a raw array of data from API\n    const fetchPlanets = async () => {\n      try {\n\n        const response = await fetch(planetsURL);\n        const data = await response.json();\n\n        const { results } = data;\n\n        parsedPlanetData(results);\n      }\n      catch(error) {\n        console.log('error', error);\n      }\n    }\n    fetchPlanets();\n\n\n//  Returns parsed data for species and sets data as state.\n    const parsedSpeciesData = (results) => {\n\n      const cleanData = results.map(species => {\n        return {\n          name: species.name,\n          averageHeight: Number(species.average_height)\n        };\n      }).filter(species => !isNaN(species.averageHeight));\n      cleanData.splice(5, 4);\n\n      setBarData(cleanData);\n    }\n\n\n//  Returns parsed data for species and sets data as state.\n    const parsedPlanetData = (results) => {\n\n      const cleanData = results.map(planets => {\n        return {\n          name: planets.name,\n          diameter: (planets.diameter) / 1000,\n          day: planets.rotation_period,\n        };\n      }).filter(planets => planets.diameter <= 100);\n\n      setLineData(cleanData);\n    }\n\n  }, [])\n\n\n  const [barData, setBarData] = useState({});\n  const [lineData, setLineData] = useState({});\n\n\n  return (\n    <div className=\"container\">\n      <Header />\n      <BarChartComponent BarChartData={barData}/>\n      <LineChartComponent LineChartData={lineData}/>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}